<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.conztanz</groupId>
		<artifactId>demo-parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../demo-parent</relativePath>
	</parent>

	<artifactId>demo</artifactId>
	<packaging>bundle</packaging>

	<properties>
		<pom.organization.name>Conztanz</pom.organization.name>
		<bundle.symbolicName>${project.artifactId}</bundle.symbolicName>
		<bundle.namespace>${bundle.namespace.root}.service</bundle.namespace>
		<milyn-smooks.version>1.5.2</milyn-smooks.version>
	</properties>

	<name>${bundle.symbolicName} [${bundle.namespace}]</name>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<!-- | example additional resource entries, useful when building Eclipse 
				RCP applications -->
			<!-- <resource> -->
			<!-- <directory>.</directory> -->
			<!-- <includes> -->
			<!-- <include>plugin.xml</include> -->
			<!-- <include>plugin.properties</include> -->
			<!-- <include>icons/**</include> -->
			<!-- </includes> -->
			<!-- </resource> -->
		</resources>
		<plugins>
			<plugin>
				<groupId>org.ops4j</groupId>
				<artifactId>maven-pax-plugin</artifactId>
				<version>1.5</version>
				<!-- | enable improved OSGi compilation support for the bundle life-cycle. 
					| to switch back to the standard bundle life-cycle, move this setting | down 
					to the maven-bundle-plugin section -->
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>3.0.1</version>
				<!-- | the following instructions build a simple set of public/private 
					classes into an OSGi bundle -->
				<configuration>
					<instructions>

						<!-- Manifest headers - Any instruction that starts with a capital 
							letter will appear in the resulting bundle's manifest file; the value for 
							the header will either be copied, augmented, or generated by BND depending 
							on the instruction. -->
						<Bundle-Vendor>${pom.organization.name}</Bundle-Vendor>
						<Bundle-SymbolicName>${bundle.symbolicName}</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						<!-- | assume public classes are in the top package, and private classes 
							are under ".impl" -->
						<Export-Package>${bundle.namespace};version="${project.version}"</Export-Package>
						<Private-Package>${bundle.namespace}.impl.*</Private-Package>

						<!-- <DynamicImport-Package>*</DynamicImport-Package> -->
						<!-- <Import-Package>*; resolution:=optional</Import-Package> -->
						<!-- <Import-Package>*</Import-Package> -->

						<!-- | each module can override these defaults in their osgi.bnd file -->

						<!-- Directives - Any instruction starting with a '-' character is 
							considered to be a directive that informs BND to perform some special processing 
							and is not copied to the manifest. -->
						<_include>-osgi.bnd</_include>
						<Include-Resource>src/main/resources</Include-Resource>

						<Export-Service>${bundle.namespace}.TransformService</Export-Service>

<!-- 						<Embed-Dependency>*;scope=compile|runtime</Embed-Dependency> -->
						
					</instructions>
					<!-- <archive> -->
					<!-- <manifest> -->
					<!-- <addClasspath>true</addClasspath> -->
					<!-- </manifest> -->
					<!-- </archive> -->
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>

		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>osgi_R4_core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>osgi_R4_compendium</artifactId>
		</dependency>


		<!-- Smooks -->
		<dependency>
			<groupId>org.milyn</groupId>
			<artifactId>milyn-smooks-all</artifactId>
			<version>1.5.2</version>
			<exclusions>
				<exclusion>
					<groupId>javassist</groupId>
					<artifactId>javassist</artifactId>
				</exclusion>
			</exclusions>
			<!-- <scope>import</scope> -->
		</dependency>



	</dependencies>

</project>